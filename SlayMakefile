{
	use vars qw($CONFIG $CONFIG_FILE $OPTIONS);
	use File::Basename qw(basename dirname);
	use File::Path qw(mkpath);
	use File::Temp qw(tempdir);

	use Cwd qw(cwd);
	use lib cwd . "/lib"; # XXX suboptimal, does not work if cwd is somewhere else
	use CPAN::Testers::ParallelSmoker;

	sub save_pwd (&) {
		my $code = shift;
		require Cwd;
		my $pwd = Cwd::cwd();
		eval {
			$code->();
		};
		my $err = $@;
		chdir $pwd or die "Can't chdir back to $pwd: $!";
		die $err if $err;
	}

	die "Please specify 'slaymake CONFIG_FILE=....yml'" if !$CONFIG_FILE;
	load_config($CONFIG_FILE);
	expand_config;

	sub ensure_dir ($) {
		my $dir = $_[0];
		mkpath $dir if (!-d $dir);
		-d $dir or die "Cannot create $dir: $!";
	}

	sub download ($) {
		my $url = $_[0];
		my $destfile = basename $url;
		ensure_dir $CONFIG->{downloaddir};
		save_pwd {
			chdir $CONFIG->{downloaddir} or die $!;
			if (!-s $destfile) {
				system("wget", $url);
			} else {
				print STDERR "INFO: $url already available as $destfile.\n";
			}
			if (!-s $destfile) {
				die "Cannot download $url";
			}
		};
	}

	sub download_perl ($) {
		my $perl_spec = $_[0];
		if ($perl_spec->{extract_from_git}) {
			# this is from git, no download
		} else {
			download $perl_spec->{url};
		}
	}

	sub extract_perl_from_tar ($) {
		my $perl_spec = $_[0];
		my $tmpdir = tempdir(CLEANUP => 1, DIR => $CONFIG->{smokerdir});
		chdir $tmpdir or die $!;
		print STDERR "Extract $perl_spec->{downloadfile} ...\n";
		system "tar", "xf", $perl_spec->{downloadfile}; # XXX assumes modern tar
		die "Problem while extracting $perl_spec->{downloadfile}" if $? != 0;
		chdir ".." or die $!;
		my $from = $tmpdir . '/' . $perl_spec->{base_without_ext};
		my $to   = $perl_spec->{builddir};
		system "mv", $from, $to; # XXX should use File::Path::move or rename
		$? == 0 or die "Cannot move $from to $to: $!";
	}

	sub extract_perl_from_git ($) {
		my $perl_spec = $_[0];
		my $git_repository = $CONFIG->{git_repository} || die "Please set 'git_repository' in config";
		save_pwd {
			chdir $git_repository
				or die "Cannot chdir to $git_repository: $!";
			my @fetch_cmd = ('git', 'fetch');
			system @fetch_cmd; # don't fail here
		};
		# git clone is verbose enough, no need for diagnostics
		my @clone_cmd = ("git", "clone", "-n", $git_repository, $perl_spec->{builddir});
		system @clone_cmd;
		$? == 0 or die "The command <@clone_cmd> failed";
		chdir $perl_spec->{builddir} or die $!;
		my @checkout_cmd = ("git", "checkout", $perl_spec->{commit});
		system @checkout_cmd;
		$? == 0 or die "The command <@checkout_cmd> failed";
	}

	sub extract_perl ($) {
		my $perl_spec = $_[0];
		save_pwd {
			ensure_dir dirname $perl_spec->{builddir};
			chdir $CONFIG->{smokerdir} or die $!;
			if ($perl_spec->{extract_from_git}) {
				extract_perl_from_git($perl_spec);
			} else {
				extract_perl_from_tar($perl_spec);
			}
		};
	}

	sub build_perl ($) {
		my $perl_spec = $_[0];
		save_pwd {
			chdir $perl_spec->{builddir} or die $!;
			system("nice", "./configure.gnu", '-Uversiononly', '-Dinstallusrbinperl=n', '-Dusedevel', "--prefix=$perl_spec->{installdir}"); # XXX relocatable
			$? == 0 or die "Configure failed";
			system("nice", "make");
			$? == 0 or die "Build failed";
		};
	}

	sub install_perl ($) {
		my $perl_spec = $_[0];
		save_pwd {
			chdir $perl_spec->{builddir} or die $!;
			system("nice", "make", "install");
			$? == 0 or die "install failed";
		};
	}

	sub cpan_smoke_modules_cmd {
		my($args) = @_;
		($^X, "./utils/cpan_smoke_modules", "-batch", "-forparallelsmoker", @$args);
	}

	sub cpan_smoke_modules {
		my($args) = @_;
		my @cmd = cpan_smoke_modules_cmd($args);
		system(@cmd);
		die "Command failed '@cmd': $?" if $? != 0;
	}
}

all:	pre-checks download-perl extract-perl build-perl install-perl prepare-smoker-modules prepare-smoker-config create-modlist install-mod start-smoking

help:
	{
		print "Please run\n";
		print "\n";
		print "    slaymake CONFIG_FILE=smoke....yml\n";
		print "\n";
	}

tools-both:
	{
		print "*** Compare reports:\n";
		print "    ./utils/cmp_ct_history.pl $CONFIG->{perl2}->{configdir}/cpanreporter/reports-sent.db $CONFIG->{perl1}->{configdir}/cpanreporter/reports-sent.db -min -min -min -fulldist\n";
	}

tools-new:
	{
		print "*** Mark FAIL reports as good:\n";
		print "    /home/e/eserte/devel/ctr_good_or_invalid.pl -geometry 600x900+0+0 -quit-at-end $CONFIG->{perl2}->{reportsdir} &\n";
		print "*** Check and send good reports forever:\n";
		print qq{    forever -60 'echo "**** WORKING ****"; sleep 1; ctr_good_or_invalid.pl -good $CONFIG->{perl2}->{reportsdir}/ ; perl5.12.0 -S send_tr_reports.pl $CONFIG->{perl2}->{reportsdir}/ ; echo "**** FINISHED ****"'\n};
	## XXX Collecting some auto-move rules...
	#mv -v `fgrep -l " Failed test 'Pod coverage on " /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "defined(%hash) is deprecated at" /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "defined(@array) is deprecated at" /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "Do you need to predeclare Carp::croak?" /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "Do you need to predeclare croak?" /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "UNIVERSAL->import is deprecated and will be removed in a future perl at" /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "Not in MANIFEST: MYMETA.yml" /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "Error:  Can't locate " /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `grep -l "Can't locate .* in @INC " /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `grep -l 'Error:  Base class package ".*" is empty.' /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "Failed test 'Test::Perl::Critic for " /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l '# Operation "eq": no method found,' /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l '^* matches null string many times in regex; marked by' /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l 'DBD::SQLite::db prepare failed: database is locked at ' /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "This Perl not built to support threads" /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "Failed test 'POD test for " /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l "Failed test 'POD spelling for " /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l '/usr/lib/libpthread.so.2: Undefined symbol "__malloc_lock" at ' /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l 'There is no form named "' /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	#mv -v `fgrep -l 'Error GETing http://' /home/cpansand/var/ctps/5136/reports/perl-5.13.6/fail.*` /home/cpansand/var/ctps/5136/reports/perl-5.13.6/sync/
	}

dump-config:
	{
		require Data::Dumper;
		print Data::Dumper::Dumper($CONFIG);
	}

pre-checks:
	{
		if ($CONFIG->{modlist}->{file} && !-r $CONFIG->{modlist}->{file}) {
			die "The modlist file '$CONFIG->{modlist}->{file}' is not readable";
		}
	}

download-perl:
	{
		download_perl $CONFIG->{perl2};
	  	download_perl $CONFIG->{perl1};
	}

extract-perl:
	{
		-e $CONFIG->{perl2}->{builddir} or extract_perl $CONFIG->{perl2};
		-e $CONFIG->{perl1}->{builddir} or extract_perl $CONFIG->{perl1};
	}

build-perl:
	{
		our $force;
		(!$force && -e $CONFIG->{perl2}->{builddir} . '/perl') or build_perl $CONFIG->{perl2};
		(!$force && -e $CONFIG->{perl1}->{builddir} . '/perl') or build_perl $CONFIG->{perl1};
	}

install-perl:
	{
		our $force;
		(!$force && -e $CONFIG->{perl2}->{installdir}) or install_perl $CONFIG->{perl2};
		(!$force && -e $CONFIG->{perl1}->{installdir}) or install_perl $CONFIG->{perl1};
	}

prepare-smoker-modules:
	{
		my @toolchain_modules = qw(YAML::Syck Term::ReadKey Expect Term::ReadLine::Perl CPAN::Reporter);
		for my $key (qw(perl2 perl1)) {
			my $perl_exe = $CONFIG->{$key}->{installdir} . "/bin/perl";

			print STDERR "INFO: now checking if CPAN::Reporter is already available...\n";
			system $perl_exe, "-MCPAN::Reporter", "-e1";
			my $cpan_reporter_available = $? == 0;

			print STDERR "INFO: installing toolchain modules...\n";
			cpan_smoke_modules(["-perl", $perl_exe,
					    "-nosignalend",
					    "-install", @toolchain_modules]);
			system $perl_exe, "-MCPAN::Reporter", "-e1";
			$? == 0 or die "Cannot build CPAN::Reporter for $perl_exe? Status=$?";

			if (!$cpan_reporter_available) {
				print STDERR "INFO: smoke toolchain modules...\n";
				my @smoke_cmd = cpan_smoke_modules_cmd(["-perl", $perl_exe,
					    				"-nosignalend",
									"-skiptested", # shouldn't be necessary, but be sure
					    	    			@toolchain_modules]);
				warn "NYI: run @smoke_cmd";
			}
		}
	}

prepare-smoker-config:
	{
		for my $key (qw(perl2 perl1)) {
			ensure_dir $CONFIG->{$key}->{configdir};
			my $cpanreporterdir = $CONFIG->{$key}->{configdir} . "/cpanreporter";
			ensure_dir $cpanreporterdir;
			ensure_dir $CONFIG->{$key}->{reportsdir};
			save_pwd {
			    chdir $CONFIG->{$key}->{reportsdir} or die $!;
			    for my $dir (qw(done invalid process sync undecided)) {
				if (!-d $dir) { mkdir $dir or die "Cannot create $dir: $!" }
			    }
			    if (!-e "new") {
				symlink ".", "new" or die "Cannot symlink new: $!";
			    }
			};

			{
				my $config_ini = $CONFIG->{$key}->{configdir} . "/cpanreporter/config.ini";
				open my $ofh, ">", $config_ini or die "Can't write to $config_ini: $!";
				while(my($k,$v) = each %{ $CONFIG->{$key}->{cpanreporter} }) {
					print $ofh "$k=$v\n";
				}
				close $ofh or die $!;
			}
			{
				my $ofile = $CONFIG->{$key}->{installdir} . "/.cpanreporterdir";
				open my $ofh, ">", $ofile or die "Can't write to $ofile: $!";
				print $ofh $cpanreporterdir, "\n";
				close $ofh or die $!;
			}
		}
	}

create-modlist:
	{
		my $modlist = $CONFIG->{smokerdir} . '/config/modlist';
		if ($CONFIG->{modlist}->{dependants}) {
			my $cmd = "$^X ./utils/find_dependants.pl $CONFIG->{modlist}->{dependants} > $modlist";
			system($cmd);
			die "Command '$cmd' failed: $?" if $? != 0;
		} elsif ($CONFIG->{modlist}->{file}) {
			my @cmd = ("cp", $CONFIG->{modlist}->{file}, $CONFIG->{smokerdir} . '/config/modlist');
			system @cmd; # XXX should use File::Copy
			die "Command '@cmd' failed" if $? != 0;
		}
	}

install-mod:
	{
		if ($CONFIG->{want_mod_comparison}) {
			for my $def (
				     ['perl2', 'mod2'],
				     ['perl1', 'mod1'],
				    ) {
				my($key, $modkey) = @$def;
				my $url = $CONFIG->{$modkey}->{url};
				die "No url set in mod1/mod2" if !$url;
				cpan_smoke_modules(["-perl", $CONFIG->{$key}->{installdir} . "/bin/perl",
						    "-nosignalend",
						    "-install", $url]);
			}
		}
	}

start-smoking:
	{
		my $modlist = $CONFIG->{smokerdir} . '/config/modlist';
		if (!-e $modlist) {
			die "$modlist was not yet created, please run create-modlist rule"; # XXX should be done automatically
		}
		for my $key (qw(perl2 perl1)) {
			my @smoke_cmd = cpan_smoke_modules_cmd
				(
					[(!exists $OPTIONS->{skiptested} || $OPTIONS->{skiptested} ? "-skiptested" : ()),
					 "-wait", "-perl", $CONFIG->{$key}->{installdir} . "/bin/perl", "-install", "-fl", $modlist,
					]
				);
		# XXXX support for other terminal emulators?
			if ($CONFIG->{run_in} eq 'screen') {
				# XXX or alternatively use "screen -list" and check for "(Attached)" string
				die "You're probably not running in a screen (TERM is not 'screen')" if $ENV{TERM} ne 'screen';
				#XXX not true on freebsd: die "You're probably not running in a screen (STY is missing)" if !$ENV{STY};
				# XXX maybe use -L for additional logging?
				my @cmd = ("screen", "-t", "smoke $CONFIG->{testlabel} $key", @smoke_cmd);
				if (fork == 0) {
					exec(@cmd);
					die "@cmd failed: $!";
				}
			} else {
				my $geom = $key eq 'perl1' ? '+0+0' : '-0+0';
				my @cmd = ("xterm",
					   "-geometry", $geom,
					   "-T", "smoking $key",
					   "-e", @smoke_cmd);
				if (fork == 0) {
					exec(@cmd);
					die "@cmd failed: $!";
				}
			}
			sleep 10; # make the smokers slightly off, so test suites which cannot run in parallel don't fail
		}
	}

# XXX rather private stuff: smoke modules which need interactivity,
# and must not be run in parallel
xxx-interactive-stuff:
	{
		my @modules = qw(X11::Protocol Image::Magick);
		for my $key (qw(perl2 perl1)) {
			my @smoke_cmd = ($^X, "./utils/cpan_smoke_modules", "-nobatch",
					      "-perl", $CONFIG->{$key}->{installdir} . "/bin/perl", "-install", 
					      @modules);
			0 == system @smoke_cmd
				or die "@smoke_cmd failed: $!";
		}
	}

cmp-ct-history:
	{
		# XXX cmp_ct_history.pl should be in utils!
		my @cmd = ($^X,
			   " ./utils/cmp_ct_history.pl",
		           $CONFIG->{perl2}->{configdir} . '/cpanreporter/reports-sent.db',
		           $CONFIG->{perl1}->{configdir} . '/cpanreporter/reports-sent.db',
		          );
		0 == system(@cmd)
			or die "@cmd failed: $?";
		"";
	}
