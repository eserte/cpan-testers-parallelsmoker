{
	use vars qw($CONFIG $CONFIG_FILE);
	use File::Basename qw(basename dirname);
	use File::Path qw(mkpath);
	use File::Temp qw(tempdir);
	use Hash::Util qw();
	use YAML::Syck qw(LoadFile);

	sub save_pwd (&) {
		my $code = shift;
		require Cwd;
		my $pwd = Cwd::cwd();
		eval {
			$code->();
		};
		my $err = $@;
		chdir $pwd or die "Can't chdir back to $pwd: $!";
		die $err if $err;
	}

	sub expand_config {
		die "testlabel is missing" if !$CONFIG->{testlabel};
		$CONFIG->{testlabel} =~ m{^[a-zA-Z0-9_.-]+$} or die "Illegal letters found in testlabel, try alphanumerics and . - _";

		$CONFIG->{smokerdir} = "$ENV{HOME}/var/ctps/$CONFIG->{testlabel}";
		$CONFIG->{downloaddir} = "$ENV{HOME}/var/ctps/downloads";

		for my $key (qw(perl1 perl2)) {
			if (!$CONFIG->{$key}->{url}) {
				my $ver = $CONFIG->{$key}->{version} or die "Must specify either url or version for every perl";
				my $url = "http://www.cpan.org/src/5.0/perl-$ver.tar.bz2";
				$CONFIG->{$key}->{url} = $url;
			}
			my $base = basename $CONFIG->{$key}->{url};
			$CONFIG->{$key}->{base} = $base;
			$CONFIG->{$key}->{downloadfile} = $CONFIG->{downloaddir} . '/' . $base;
			(my $base_without_ext = $base) =~ s{\.tar\.(bz2|gz)$}{};
			$CONFIG->{$key}->{base_without_ext} = $base_without_ext;
		}
		if ($CONFIG->{perl1}->{base_without_ext} eq $CONFIG->{perl2}->{base_without_ext}) {
			# same perl, so need to add a suffix
			for my $def (['perl1', '1'], ['perl2', '2']) {
				my($key, $suffix) = @$def;
				my $base = $CONFIG->{$key}->{base_without_ext} . "-" . $suffix;
				$CONFIG->{$key}->{builddir} = $CONFIG->{smokerdir} . '/src/' . $base;
				$CONFIG->{$key}->{installdir} = $CONFIG->{smokerdir} . '/install/' . $base;
				$CONFIG->{$key}->{configdir} = $CONFIG->{smokerdir} . '/config/' . $base;
				$CONFIG->{$key}->{reportsdir} = $CONFIG->{smokerdir} . '/reports/' . $base;
			}
		} else {
			for my $key (qw(perl1 perl2)) {
				$CONFIG->{$key}->{builddir} = $CONFIG->{smokerdir} . '/src/' . $CONFIG->{$key}->{base_without_ext};
				$CONFIG->{$key}->{installdir} = $CONFIG->{smokerdir} . '/install/' . $CONFIG->{$key}->{base_without_ext};
				$CONFIG->{$key}->{configdir} = $CONFIG->{smokerdir} . '/config/' . $CONFIG->{$key}->{base_without_ext};
				$CONFIG->{$key}->{reportsdir} = $CONFIG->{smokerdir} . '/reports/' . $CONFIG->{$key}->{base_without_ext};
			}
		}

		for my $key (qw(perl1 perl2)) {
			for my $def (['edit_report', 'default:no'],
				     ['email_from',  $ENV{EMAIL}],
				     ['send_report', 'default:yes'],
				     ['transport',   "File " . $CONFIG->{$key}->{reportsdir}],
				    ) {
				my($cr_key, $cr_def_val) = @$def;
				if (!exists $CONFIG->{cpanreporter}->{$cr_key}) {
					$CONFIG->{$key}->{cpanreporter}->{$cr_key} = $cr_def_val;
				} else {
					$CONFIG->{$key}->{cpanreporter}->{$cr_key} = $CONFIG->{cpanreporter}->{$cr_key};
				}
			}
		}

		{ local $SIG{__WARN__} = sub {}; # lock_hashref_recurse is noisy
		  Hash::Util::lock_hashref_recurse($CONFIG);
		}
	}

	$CONFIG_FILE = "smoke.yaml" if !$CONFIG_FILE;
	$CONFIG = (LoadFile $CONFIG_FILE)->{smoke};
	expand_config;

	sub ensure_dir ($) {
		my $dir = $_[0];
		mkpath $dir if (!-d $dir);
		-d $dir or die "Cannot create $dir: $!";
	}

	sub download ($) {
		my $url = $_[0];
		my $destfile = basename $url;
		ensure_dir $CONFIG->{downloaddir};
		save_pwd {
			chdir $CONFIG->{downloaddir} or die $!;
			if (!-s $destfile) {
				system("wget", $url);
			} else {
				print STDERR "INFO: $url already available as $destfile.\n";
			}
			if (!-s $destfile) {
				die "Cannot download $url";
			}
		};
	}

	sub download_perl ($) {
		my $perl_spec = $_[0];
		download $perl_spec->{url};
	}

	sub extract_perl ($) {
		my $perl_spec = $_[0];
		save_pwd {
			ensure_dir dirname $perl_spec->{builddir};
			chdir $CONFIG->{smokerdir} or die $!;
			my $tmpdir = tempdir(CLEANUP => 1, DIR => $CONFIG->{smokerdir});
			chdir $tmpdir or die $!;
			system "tar", "xf", $perl_spec->{downloadfile}; # XXX assumes modern tar
			die "Problem while extracting $perl_spec->{downloadfile}" if $? != 0;
			chdir ".." or die $!;
			my $from = $tmpdir . '/' . $perl_spec->{base_without_ext};
			my $to   = $perl_spec->{builddir};
			system "mv", $from, $to; # XXX should use File::Path::move or rename
			$? == 0 or die "Cannot move $from to $to: $!";
		};
	}

	sub build_perl ($) {
		my $perl_spec = $_[0];
		save_pwd {
			chdir $perl_spec->{builddir} or die $!;
			system("nice", "./configure.gnu", "--prefix=$perl_spec->{installdir}"); # XXX relocatable
			$? == 0 or die "Configure failed";
			system("nice", "make");
			$? == 0 or die "Build failed";
		};
	}

	sub install_perl ($) {
		my $perl_spec = $_[0];
		save_pwd {
			chdir $perl_spec->{builddir} or die $!;
			system("nice", "make", "install");
			$? == 0 or die "install failed";
		};
	}
}

all:

dump-config:
	{
		require Data::Dumper;
		print Data::Dumper::Dumper($CONFIG);
	}

download-perl:
	{
	  	download_perl $CONFIG->{perl1};
		download_perl $CONFIG->{perl2};
	}

extract-perl:
	{
		-e $CONFIG->{perl1}->{builddir} or extract_perl $CONFIG->{perl1};
		-e $CONFIG->{perl2}->{builddir} or extract_perl $CONFIG->{perl2};
	}

build-perl:
	{
		our $force;
		(!$force && -e $CONFIG->{perl1}->{builddir} . '/perl') or build_perl $CONFIG->{perl1};
		(!$force && -e $CONFIG->{perl2}->{builddir} . '/perl') or build_perl $CONFIG->{perl2};
	}

install-perl:
	{
		our $force;
		(!$force && -e $CONFIG->{perl1}->{installdir}) or install_perl $CONFIG->{perl1};
		(!$force && -e $CONFIG->{perl2}->{installdir}) or install_perl $CONFIG->{perl2};
	}

prepare-smoker-modules:
	{
		# XXX should handle devel perl versions (with perlver)
		for my $key (qw(perl1 perl2)) {
			system("./utils/cpan_smoke_modules", "-perl", $CONFIG->{$key}->{installdir} . "/bin/perl",
			"-install", qw(YAML::Syck Term::ReadKey Expect Term::ReadLine::Perl CPAN::Reporter));
		}
	}

prepare-smoker-config:
	{
		for my $key (qw(perl1 perl2)) {
			ensure_dir $CONFIG->{$key}->{configdir};
			my $cpanreporterdir = $CONFIG->{$key}->{configdir} . "/cpanreporter";
			ensure_dir $cpanreporterdir;
			ensure_dir $CONFIG->{$key}->{reportsdir};
			save_pwd {
			    chdir $CONFIG->{$key}->{reportsdir} or die $!;
			    for my $dir (qw(done invalid process sync undecided)) {
				if (!-d $dir) { mkdir $dir or die "Cannot create $dir: $!" }
			    }
			    if (!-e "new") {
				symlink ".", "new" or die "Cannot symlink new: $!";
			    }
			};

			{
				my $config_ini = $CONFIG->{$key}->{configdir} . "/cpanreporter/config.ini";
				open my $ofh, ">", $config_ini or die "Can't write to $config_ini: $!";
				while(my($k,$v) = each %{ $CONFIG->{$key}->{cpanreporter} }) {
					print $ofh "$k=$v\n";
				}
				close $ofh or die $!;
			}
			{
				my $ofile = $CONFIG->{$key}->{installdir} . "/.cpanreporterdir";
				open my $ofh, ">", $ofile or die "Can't write to $ofile: $!";
				print $ofh $cpanreporterdir, "\n";
				close $ofh or die $!;
			}
		}
	}

create-modlist:
	{
		my $modlist = $CONFIG->{smokerdir} . '/config/modlist';
		if ($CONFIG->{modlist}->{dependants}) {
			my $cmd = "./utils/find_dependants.pl $CONFIG->{modlist}->{dependants} > $modlist";
			system($cmd);
			die "Command '$cmd' failed: $?" if $? != 0;
		} else {
			die "NYI";
		}
	}

start-smoking:
	{
		my $modlist = $CONFIG->{smokerdir} . '/config/modlist';
		if (!-e $modlist) {
			die "$modlist was not yet created, please run create-modlist rule"; # XXX should be done automatically
		}
		for my $key (qw(perl1 perl2)) {
			my $geom = $key eq 'perl1' ? '+0+0' : '-0+0';
			my @cmd = ("xterm",
				   "-geometry", $geom,
				   "-T", "smoking $key",
				   "-e", "./utils/cpan_smoke_modules", "-perl", $CONFIG->{$key}->{installdir} . "/bin/perl", "-install", "-fl", $modlist);
			if (fork == 0) {
				exec(@cmd);
				die "@cmd failed: $!";
			}
		}
	}
